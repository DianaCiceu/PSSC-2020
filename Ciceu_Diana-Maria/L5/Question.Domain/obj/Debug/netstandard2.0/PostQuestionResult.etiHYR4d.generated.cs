// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CSharp.Choices;

namespace Question.Domain.CreateQuestionWorkflow
{
    public static partial class PostQuestionResult
    {
        public static IPostQuestionResult Match(this IPostQuestionResult self, System.Func<QuestionPosted, IPostQuestionResult> whenQuestionPosted, System.Func<QuestionNotPosted, IPostQuestionResult> whenQuestionNotPosted, System.Func<QuestionValidationFailed, IPostQuestionResult> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return whenQuestionNotPosted(questionnotposted);
                case QuestionValidationFailed questionvalidationfailed:
                    return whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<IPostQuestionResult> MatchAsync(this IPostQuestionResult self, System.Func<QuestionPosted, System.Threading.Tasks.Task<IPostQuestionResult>> whenQuestionPosted, System.Func<QuestionNotPosted, System.Threading.Tasks.Task<IPostQuestionResult>> whenQuestionNotPosted, System.Func<QuestionValidationFailed, System.Threading.Tasks.Task<IPostQuestionResult>> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return await whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return await whenQuestionNotPosted(questionnotposted);
                case QuestionValidationFailed questionvalidationfailed:
                    return await whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this IPostQuestionResult self, System.Func<QuestionPosted, R> whenQuestionPosted, System.Func<QuestionNotPosted, R> whenQuestionNotPosted, System.Func<QuestionValidationFailed, R> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return whenQuestionNotPosted(questionnotposted);
                case QuestionValidationFailed questionvalidationfailed:
                    return whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this IPostQuestionResult self, System.Func<QuestionPosted, System.Threading.Tasks.Task<R>> whenQuestionPosted, System.Func<QuestionNotPosted, System.Threading.Tasks.Task<R>> whenQuestionNotPosted, System.Func<QuestionValidationFailed, System.Threading.Tasks.Task<R>> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return await whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return await whenQuestionNotPosted(questionnotposted);
                case QuestionValidationFailed questionvalidationfailed:
                    return await whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}